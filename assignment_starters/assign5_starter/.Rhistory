# plotting histogram of wholebrain S-F corrs
ggplot(Network_df_subjs,aes(x = network,y = mean, fill = hem)) +
geom_boxplot(position=dodge) +
geom_dotplot(position=dodge,binaxis='y',binwidth=0.01,stackdir='center')+
theme_minimal()
df_pfc_for_export
ggplot(df_pfc_for_export,aes(x = ami_total, y = rho, colour = Group)) + geom_point()
ggplot(df_pfc_for_export,aes(x = ami_total, y = rho, colour = Group)) + geom_point()
df_lpfc_for_export <- df_pfc_for_export %>% filter(grepl("LH_Cont_PFCl_3",rois))
ggplot(df_lpfc_for_export,aes(x = ami_total, y = rho, colour = Group)) + geom_point()
ggplot(df_lpfc_for_export,aes(x = ami_total, y = rho, colour = Group)) + geom_point() + geom_smooth(method='lm')
df_lpfc_for_export <- df_pfc_for_export %>% filter(grepl("Cont_PFCl_3",rois))
ggplot(df_lpfc_for_export,aes(x = ami_total, y = rho, fill = rois)) + geom_point(shape=21) + geom_smooth(method='lm') + my_theme() + scale_fill_manual(values=my_palette)
df_lpfc_for_export <- df_pfc_for_export %>% filter(grepl("Cont_PFCl",rois))
ggplot(df_lpfc_for_export,aes(x = ami_total, y = rho, fill = rois)) + geom_point(shape=21) + geom_smooth(method='lm') + my_theme() + scale_fill_manual(values=my_palette)
df_lpfc_for_export <- df_pfc_for_export %>% filter(grepl("LH_Cont_PFCl",rois))
ggplot(df_lpfc_for_export,aes(x = ami_total, y = rho, fill = Group)) + geom_point(shape=21) + geom_smooth(method='lm') + my_theme() + scale_fill_manual(values=my_palette)
ggplot(df_lpfc_for_export,aes(x = ami_total, y = rho, fill = rois)) + geom_point(shape=21) + geom_smooth(method='lm') + my_theme() + scale_fill_manual(values=my_palette)
plot(bayes.cor.test(df_lpfc_for_export$ami_total,df_lpfc_for_export$rho))
library(BayesianFirstAid)
plot(bayes.cor.test(df_lpfc_for_export$ami_total,df_lpfc_for_export$rho))
plot(bayes.cor.test(df_lpfc_for_export$ami_total,df_lpfc_for_export$explore_exploit_inc))
#Sherwin Thiyagarajan
#Dr. Hogeveen
#Data Science in Psychology and Neuroscience
library(tidyverse)
# plot theme stuff
# Many palettes available online, can customize
# these are from: https://colorbrewer2.org/#type=qualitative&scheme=Set1&n=9
my_palette <- c("#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00")
# This is the basic function I use for all the ggplots I create.
# Modified from this black themed ggplot function: https://gist.github.com/jslefche/eff85ef06b4705e6efbc
my_theme = function(base_size = 24, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = base_size*0.8, color = "black", lineheight = 0.9),
axis.text.y = element_text(size = base_size*0.8, color = "black", lineheight = 0.9),
axis.ticks = element_line(color = "black", size  =  0.2),
axis.title.x = element_text(size = base_size, color = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = base_size, color = "black", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "#ffffff"),
legend.key = element_rect(color = "black",  fill = "#ffffff"),
legend.key.size = unit(2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "black"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "black"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.background = element_rect(fill = "#ffffff", color  =  NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "#ffffff"),
panel.grid.minor = element_line(color = "#ffffff"),
panel.spacing = unit(2, "lines"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "black"),
strip.text.y = element_text(size = base_size*0.8, color = "black",angle = -90),
# Specify plot options
plot.background = element_rect(color = "#ffffff", fill = "#ffffff"),
plot.title = element_text(size = base_size*1.2, color = "black"),
plot.margin = unit(rep(1, 4), "lines")
)
}
# load in the dataset
df <- read_csv('/Users/jeremyhogeveen/Dropbox/Fall_2022/teaching/DSPN/DSPN_Fall2022_Git/assignment_starters/assign5_starter/data/GSP_list_140630.csv') %>%
filter(MenRot_TOT_Accuracy != "NA") %>%
mutate(TotCortSurfArea = (L_TotCortSurfArea+R_TotCortSurfArea)/2)
# Part 1 - Does mental rotation accuracy vary as a function of total cortical surface area
ggplot(df,aes(x=TotCortSurfArea,y=MenRot_TOT_Accuracy)) +
geom_point(size=2) +
geom_smooth(method=lm) +
my_theme() +
ggtitle('Mental Rotation Accuracy ~ Total Cortical Surface Area')
m_regr <- lm(MenRot_TOT_Accuracy~TotCortSurfArea,df)
summary(m_regr)
# adding z-transformed values
df1 <- df %>%
mutate(zacc = as.numeric(scale(MenRot_TOT_Accuracy)),
ztotcort = as.numeric(scale(TotCortSurfArea)))
# rerunning model with zvars
m_zregr <- lm(zacc~ztotcort,df1)
summary(m_zregr)
ggplot(df,aes(x = as.factor(Group), y = MenRot_TOT_Accuracy)) +
geom_boxplot() +
geom_point() +
my_theme()
m_ttest <- t.test(MenRot_TOT_Accuracy~Group,alternative="t",paired=FALSE,var.equal=FALSE,df)
print(m_ttest)
# Independence
library(car)
m_ind <- durbinWatsonTest(m_regr)
print(m_ind)
# Normality
ggplot(df,aes(x = TotCortSurfArea)) +
geom_histogram(bins=100) +
my_theme()
m_norm_cort <- shapiro.test(df$TotCortSurfArea)
print(m_norm_cort)
plot(m_regr, which=2)
var.test(MenRot_TOT_Accuracy~Group,df)
summary(m_zregr)
2.103e-01 * 10
shapiro.test(df$TotCortSurfArea)
# load in the dataset
setwd("/Users/jeremyhogeveen/Dropbox/Fall_2022/teaching/DSPN/DSPN_Fall2022_Git/assignment_starters/assign5_starter/data")
library(tidyverse)
# load in the dataset
setwd("/Users/jeremyhogeveen/Dropbox/Fall_2022/teaching/DSPN/DSPN_Fall2022_Git/assignment_starters/assign5_starter/data")
df <- read_csv("GSP_list_140630.csv") %>%
filter(MenRot_TOT_Accuracy!="NA") %>%
mutate(TotCortSurfArea = (L_TotCortSurfArea+R_TotCortSurfArea)/2)
#Aesthetic Theme
my_theme = function(base_size = 24, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = base_size*0.8, color = "black", lineheight = 0.9),
axis.text.y = element_text(size = base_size*0.8, color = "black", lineheight = 0.9),
axis.ticks = element_line(color = "black", size  =  0.2),
axis.title.x = element_text(size = base_size, color = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = base_size, color = "black", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "#ffffff"),
legend.key = element_rect(color = "black",  fill = "#ffffff"),
legend.key.size = unit(2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "black"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "black"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.background = element_rect(fill = "#ffffff", color  =  NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "#ffffff"),
panel.grid.minor = element_line(color = "#ffffff"),
panel.spacing = unit(2, "lines"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "black"),
strip.text.y = element_text(size = base_size*0.8, color = "black",angle = -90),
# Specify plot options
plot.background = element_rect(color = "#ffffff", fill = "#ffffff"),
plot.title = element_text(size = base_size*1.2, color = "black"),
plot.margin = unit(rep(1, 4), "lines")
)
}
ggplot(df,aes(x=TotCortSurfArea,y=MenRot_TOT_Accuracy)) +
my_theme() +
geom_point(size=1) +
geom_smooth(method = "glm")
m_rho <- cor.test(df$TotCortSurfArea,df$MenRot_TOT_Accuracy,method='spearman')
print(m_rho)
#There is a slight positive correlation between cortical surface area and mental rotation accuracy
ggplot(df,aes(x=TotCortSurfArea,y=MenRot_TOT_Accuracy,group=Group)) +
my_theme() +
geom_boxplot() +
geom_dotplot(aes(), color = "black", binaxis='y', binwidth = .005, stackdir='center')
m_mregr <- lm(MenRot_TOT_Accuracy~TotCortSurfArea+Group,df)
summary(m_mregr)
#There is also a slight difference across groups, with group 1 being the higher of the two.
library(car)
m_ind <- durbinWatsonTest(m_mregr)
print(m_ind)
plot(m_mregr,which=2)
ggplot(df,aes(x = Group)) +
geom_histogram(bins=10) +
my_theme()
m_norm_tv1 <- shapiro.test(df$Group)
print(m_norm_tv1)
ggplot(df,aes(x = TotCortSurfArea)) +
geom_histogram(bins=10) +
my_theme()
m_norm_tv2 <- shapiro.test(df$TotCortSurfArea)
print(m_norm_tv2)
#I can figure out the first two, and they both ROUGHLY fit within their respective assumptions
#The third of the GLM assumptions (equal variance) I am not exactly sure how to conduct a test on however
library(tidyverse)
library(ggplot2)
# Read in data
df <- read_csv("/Users/jeremyhogeveen/Dropbox/Fall_2022/teaching/DSPN/DSPN_Fall2022_Git/assignment_starters/assign5_starter/data/GSP_list_140630.csv")
# mutating
df <- df %>%
mutate (TotCortSurfArea = (R_TotCortSurfArea + L_TotCortSurfArea))
# had trouble with plots because lengths differed, so decided to add this step in order to remove missing values
df2 <- data.frame(df$TotCortSurfArea, df$MenRot_TOT_Accuracy)
# remove NAs
df2 <- df2 %>%
na.omit
#rename variables
df2 <- df2 %>%
rename(
TotCortSurfArea = df.TotCortSurfArea,
MenRot_TOT_Accuracy = df.MenRot_TOT_Accuracy
)
ggplot(df2, aes(TotCortSurfArea, MenRot_TOT_Accuracy) ) +
geom_point(size = 1.5, shape = 1) +
labs(x = "Total Cortical Surface Area", y = "Mental Rotation Accuracy", title = "Mental Rotation Accuracy by Cortical Surface Area") +
theme_classic()
# fitting a model
myfit <- lm(MenRot_TOT_Accuracy ~ TotCortSurfArea, data = df2)
summary(myfit)
ggplot(df2, aes(TotCortSurfArea, MenRot_TOT_Accuracy) ) +
geom_point(size = 1.5, shape = 1) +
stat_smooth(method = lm, formula = y ~ x) +
theme_classic() +
labs(x = "Total Cortical Surface Area", y = "Mental Rotation Accuracy",title = "Fitted Regression Model")
# Residuals vs x:
ggplot(df2, aes(TotCortSurfArea, myfit$residuals)) +
geom_point(size = 1, shape = 1) +
labs(x = "Total Cortical Surface Area", y = "residuals", title = "Residuals vs x") +
theme_classic()
# histogram
ggplot(df2, aes(myfit$residuals))+
geom_histogram(bins = 20, alpha = .9, color = "black", fill = "grey") +
labs(x = "residuals", y = "count", title = "Histogram of Residuals") +
theme_bw()
# QQ plot
ggplot(df2, aes(sample = myfit$residuals))+
geom_qq()+
geom_qq_line()+
labs(x = "Theoretical Quantiles", y = "Sample Quantiles", title = "Normal Q-Q Plot") +
theme_bw()
# shapiro test
shapiro.test(myfit$residuals)
#plotting fitted values vs residuals
ggplot(df2, aes(myfit$fitted.values, myfit$residuals)) +
geom_point(size = 1, shape = 1) +
labs(x = "fitted values", y = "residuals", title = "Fitted values vs. Residuals") +
theme_classic()
#bp test
library(lmtest)
bptest(myfit, studentize = FALSE)
#check for y outliers
boxplot(rstudent(myfit))
#youtliers <- which(abs(rstudent(myfit)) > qt(1-0.05/(2*n),n-2))
#youtliers
# couldn't get this part to run when I knitted it, so output is below
#leverage plot for x outliers
Leverage <- hatvalues(myfit)
ggplot(df2, aes(Leverage, myfit$residuals)) +
geom_point(size = 2, shape = 1) +
labs(x = "leverage", y = "residuals", title = "Residuals vs Leverage") +
theme_classic()
#xoutliers<-which(Leverage>2/(n*2)
#xoutliers2<-which(Leverage>2/(n*3))
#xoutliers
#xoutliers2
# couldn't get this part to run when I knitted it, so output is below
##box-cox
library(MASS)
boxcox(df2$MenRot_TOT_Accuracy ~ df2$TotCortSurfArea, lambda = seq(-2, 5, length = 10))
# mutating for transformation
df2<- df2 %>%
mutate (MenRot_TOT_Accuracy_2 = MenRot_TOT_Accuracy^2)
# refitting a model
myfit2 <- lm(MenRot_TOT_Accuracy_2 ~ TotCortSurfArea, data = df2)
summary(myfit2)
ggplot(df2, aes(TotCortSurfArea, MenRot_TOT_Accuracy_2) ) +
geom_point(size = 1.5, shape = 1) +
stat_smooth(method = lm, formula = y ~ x) +
theme_classic() +
labs(x = "Total Cortical Surface Area", y = "Mental Rotation Accuracy^2",title = "Re-Fitted Regression Model")
# Residuals vs x:
ggplot(df2, aes(TotCortSurfArea, myfit2$residuals)) +
geom_point(size = 1, shape = 1) +
labs(x = "Total Cortical Surface Area", y = "residuals", title = "Residuals vs x") +
theme_classic()
# histogram
ggplot(df2, aes(myfit2$residuals))+
geom_histogram(bins = 20, alpha = .9, color = "black", fill = "grey") +
labs(x = "residuals", y = "count", title = "Histogram of Residuals") +
theme_bw()
# QQ plot
ggplot(df2, aes(sample = myfit2$residuals))+
geom_qq()+
geom_qq_line()+
labs(x = "Theoretical Quantiles", y = "Sample Quantiles", title = "Normal Q-Q Plot") +
theme_bw()
# shapiro test
shapiro.test(myfit2$residuals)
#plotting fitted values vs residuals
ggplot(df2, aes(myfit2$fitted.values, myfit2$residuals)) +
geom_point(size = 1, shape = 1) +
labs(x = "fitted values", y = "residuals", title = "Fitted values vs. Residuals") +
theme_classic()
#bp test
library(lmtest)
bptest(myfit2, studentize = FALSE)
# check for y outliers
boxplot(rstudent(myfit2))
#youtliers <- which(abs(rstudent(myfit2)) > qt(1-0.05/(2*n),n-2))
#youtliers
# couldn't get this part to run when I knitted it, so output is below
#leverage plot for x outliers
Leverage <- hatvalues(myfit2)
ggplot(df2, aes(Leverage, myfit2$residuals)) +
geom_point(size = 2, shape = 1) +
labs(x = "leverage", y = "residuals", title = "Residuals vs Leverage") +
theme_classic()
#xoutliers<-which(Leverage>2/n*2)
#xoutliers2<-which(Leverage>2/n*3)
#xoutliers
#xoutliers2
# couldn't get this part to run when I knitted it, so output is below
df<- df %>%
mutate(Group = recode(Group,
"0" = "Group_0",
"1" = "Group_1"))
ggplot(df, aes(x = Group, y = MenRot_TOT_Accuracy)) +
geom_boxplot(aes(color = Group), alpha = 1, width = .7) +
scale_fill_manual(values = c("#00AFBB", "#E7B800")) +
scale_color_manual(values = c("#058B94", "#9B7C06")) +
labs(title = "Accuracy by Group", y = "Mental Rotation Accuracy", x = "Group") +
theme_bw()
ggplot(df, aes(x = as.factor(Group), y = MenRot_TOT_Accuracy)) +
geom_boxplot(aes(color = Group), alpha = 1, width = .7) +
scale_fill_manual(values = c("#00AFBB", "#E7B800")) +
scale_color_manual(values = c("#058B94", "#9B7C06")) +
labs(title = "Accuracy by Group", y = "Mental Rotation Accuracy", x = "Group") +
theme_bw()
ggplot(df, aes(x = as.factor(Group), y = MenRot_TOT_Accuracy)) +
geom_boxplot(aes(color = as.factor(Group)), alpha = 1, width = .7) +
scale_fill_manual(values = c("#00AFBB", "#E7B800")) +
scale_color_manual(values = c("#058B94", "#9B7C06")) +
labs(title = "Accuracy by Group", y = "Mental Rotation Accuracy", x = "Group") +
theme_bw()
m_ttest <- t.test(MenRot_TOT_Accuracy~Group,alternative="less",paired=FALSE,var.equal=FALSE,df)
print(m_ttest)
df<- df %>%
mutate(Group = recode(Group,
0 = "Group_0",
1 = "Group_1"))
df<- df %>%
mutate(Group = recode(Group,0 = "Group_0",1 = "Group_1"))
df <- df %>%
mutate(Group = recode(Group,0 = "Group_0",1 = "Group_1"))
df <- df %>%
recode(Group,0 = "Group_0",1 = "Group_1")
df <- df %>%
recode(Group,"0" = "Group_0","1" = "Group_1")
df <- df %>% recode()
df <- df %>% recode(Group,`0` = "Grp0",`1`="Grp1")
# Starter code -------------------------------------------------------------
library(tidyverse)
# load in the dataset
df <- read_csv("/Users/jeremyhogeveen/Dropbox/Fall_2022/teaching/DSPN/DSPN_Fall2022_Git/assignment_starters/assign5_starter/data/GSP_list_140630.csv") %>%
filter(MenRot_TOT_Accuracy!="NA") %>%
mutate(TotCortSurfArea = (L_TotCortSurfArea+R_TotCortSurfArea)/2)
library(rstudioapi)
#Pearson's R
ggplot(df,aes(x=TotCortSurfArea,y=MenRot_TOT_Accuracy)) +
geom_point(size=2, alpha=0.5) +
geom_smooth(method=lm,se=T) +
ggtitle('Figure 1. Bivariate Correlation')
a <- cor.test(df$MenRot_TOT_Accuracy,df$TotCortSurfArea)
a
showDialog("Bivariate correlaiton:",
"Figure 1 suggests that there is a positive relationship between
mental rotation accuracy and total cortical surface area.
Pearson's R for these two variables is 0.2102512, with a p-value
of < 0.01, indicating that there is indeed a significant
positive correlation between these variables.")
#Welch Two Sample t-test
ggplot(df,aes(x = as.factor(Group), y = MenRot_TOT_Accuracy)) +
geom_boxplot() +
geom_dotplot(binaxis='y', binwidth = 0.02, stackdir='center', dotsize = 0.35,alpha=0.5) +
ggtitle('Figure 2. Mental rotation accuracy by group')
b <- t.test(MenRot_TOT_Accuracy ~ as.factor(Group),
alternative = "two.sided", df)
print(b)
showDialog("Accuaracy by group:",
"Figure 2 suggests that group 1 showed higher accuracy on
average than group 0.
A Welch Two Sample t-test showed that the difference between
mean accuracies for the two groups was significant, with a
p-value of < 0.01.")
load("~/Dropbox/Fall_2022/teaching/DSPN/DSPN_Fall2022_assignment_portal/assignment5_inference/Assignment 5 Lauren Brown.RData")
library(tidyverse)
library(stats)
options(scipen = 999)
#https://www.nature.com/articles/sdata201531#MOESM86
library(tidyverse)
library(stats)
options(scipen = 999)
my_palette <- c("#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00")
my_theme = function(base_size = 24, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = base_size*0.8, color = "black", lineheight = 0.9),
axis.text.y = element_text(size = base_size*0.8, color = "black", lineheight = 0.9),
axis.ticks = element_line(color = "black", size  =  0.2),
axis.title.x = element_text(size = base_size, color = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = base_size, color = "black", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "#ffffff"),
legend.key = element_rect(color = "black",  fill = "#ffffff"),
legend.key.size = unit(2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "black"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "black"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.background = element_rect(fill = "#ffffff", color  =  NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "#ffffff"),
panel.grid.minor = element_line(color = "#ffffff"),
panel.spacing = unit(2, "lines"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "black"),
strip.text.y = element_text(size = base_size*0.8, color = "black",angle = -90),
# Specify plot options
plot.background = element_rect(color = "#ffffff", fill = "#ffffff"),
plot.title = element_text(size = base_size*1.2, color = "black"),
plot.margin = unit(rep(1, 4), "lines")
)
}
#https://www.nature.com/articles/sdata201531#MOESM86
library(tidyverse)
library(stats)
options(scipen = 999)
my_palette <- c("#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00")
my_theme = function(base_size = 24, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = base_size*0.8, color = "black", lineheight = 0.9),
axis.text.y = element_text(size = base_size*0.8, color = "black", lineheight = 0.9),
axis.ticks = element_line(color = "black", size  =  0.2),
axis.title.x = element_text(size = base_size, color = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = base_size, color = "black", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "#ffffff"),
legend.key = element_rect(color = "black",  fill = "#ffffff"),
legend.key.size = unit(2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "black"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "black"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.background = element_rect(fill = "#ffffff", color  =  NA),
panel.border = element_rect(fill = NA, color = "black"),
panel.grid.major = element_line(color = "#ffffff"),
panel.grid.minor = element_line(color = "#ffffff"),
panel.spacing = unit(2, "lines"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "black"),
strip.text.y = element_text(size = base_size*0.8, color = "black",angle = -90),
# Specify plot options
plot.background = element_rect(color = "#ffffff", fill = "#ffffff"),
plot.title = element_text(size = base_size*1.2, color = "black"),
plot.margin = unit(rep(1, 4), "lines")
)
}
setwd("/Users/jeremyhogeveen/Dropbox/Fall_2022/teaching/DSPN/DSPN_Fall2022_Git/assignment_starters/assign5_starter/")
df <- read_csv('./data/GSP_list_140630.csv') %>%
filter(MenRot_TOT_Accuracy!="NA") %>%
mutate(TotCortSurfArea = (L_TotCortSurfArea+R_TotCortSurfArea)/2)
head(df)
cols(
.default = col_double(),
Subject_ID = col_character(),
Subject_Rescan_ID = col_character(),
Behavior = col_character(),
Hand = col_character(),
Race_Ethn = col_character(),
Scanner_Bin = col_character(),
Console = col_character(),
Coil = col_character()
)
# Not sure if I did this right, but it's not a waving monkey
hist(df$TotCortSurfArea)
hist(df$MenRot_TOT_Accuracy)
ggplot(df,aes(x = MenRot_TOT_Accuracy, y = TotCortSurfArea, label = Subject_ID)) +
geom_label() +
geom_point() +
geom_smooth(method=lm)+
my_theme()+
ggtitle('Group Bivariance')
m_r <- cor.test(df$MenRot_TOT_Accuracy,df$TotCortSurfArea)
m_r
